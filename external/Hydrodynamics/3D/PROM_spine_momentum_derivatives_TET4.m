% PROM_spine_momentum_derivatives_TET4
%
% Synthax:
% der = PROM_spine_momentum_derivatives_TET4(q,qd,qdd,eta0,xi,tensors)
%
% Description: This function returns the partial derivatives of the change
% in the fish momentum, which is understood as a force acting on the spine.
% The partial derivatives are needed to solve the sensitivity ODE as well 
% as the EoMs.
%
% INPUTS: 
% (1) q:                vector of time domain displacements
% (2) qd:               vector of time domain velocities
% (3) qdd:              vector of time domain acceleration
% (4) xi:               shape variation parameter vector/scalar
% (5) tensors:          tensors (struct) used to express the spine momentum
%                       change
%
% OUTPUTS:
% (1) der:              strucure array containing the partial derivatives 
%     
% Additional notes:
%   - q,qd, qdd should be understood as eta and dot{eta}, ddot{eta}.
%
% Last modified: 13/10/2023, Mathieu Dubied, ETH ZÃ¼rich
function der = PROM_spine_momentum_derivatives_TET4(q,qd,qdd,xi,tensors)
       
    % get tensors   
    Txx = tensors.Txx.f0;
    TxV = tensors.TxV.f0;
    TVx = tensors.TVx.f0;
    TVV = tensors.TVV.f0;
    TUV = tensors.TUV.f0;
    TVU = tensors.TVU.f0;
    TUU = tensors.TUU.f0;
    TxU = tensors.TxU.f0;
    TUx = tensors.TUx.f0;

    Txx3 = tensors.Txx.f1;
    TxV4 = tensors.TxV.f1;
    TVx4 = tensors.TVx.f1;
    TVV5 = tensors.TVV.f1;
    TUV5 = tensors.TUV.f1;
    TVU5 = tensors.TVU.f1;
    % TUU5 = tensors.TUU.f1;
    TxU4 = tensors.TxU.f1;
    TUx4 = tensors.TUx.f1;

    Txx4 = tensors.Txx.f2;
    TxV5 = tensors.TxV.f2;
    TVx5 = tensors.TVx.f2;
    TVV6 = tensors.TVV.f2;
    % TUV6 = tensors.TUV.f2;
    % TVU6 = tensors.TVU.f2;
    % TUU6 = tensors.TUU.f2;
    % TxU5 = tensors.TxU.f2;
    % TUx5 = tensors.TUx.f2;

    % dfdp ________________________________________________________________
    df0dp = ttv(TxU,qdd,2) ...
            + ttv(TUx,qdd,2) ...
            + ttv(ttv(TUU,xi,4),qdd,2) ...
            + ttv(ttv(TUU,xi,3),qdd,2) ...
            + ttv(ttv(TUV,q,4),qdd,2) ...
            + ttv(ttv(TVU,q,3),qd,2) ...
            + ttv(ttv(TVU,qd,3),qd,2) ...
            + ttv(ttv(TUV,qd,4),qd,2);

    df1dp = ttv(Txx3,qdd,2) ...
            + ttv(ttv(TxU4,xi,4),qdd,2) ...
            + ttv(ttv(TxU4,xi,3),qdd,2) ...
            + ttv(ttv(TxV4,q,3),qdd,2) ...
            + ttv(ttv(TUx4,xi,4),qdd,2) ...
            + ttv(ttv(TUx4,xi,3),qdd,2) ...
            + ttv(ttv(ttv(TUV5,xi,5),q,4),qdd,2) ...
            + ttv(ttv(ttv(TUV5,q,4),xi,3),qdd,2) ...
            + ttv(ttv(TVx4,q,3),qdd,2) ...
            + ttv(ttv(ttv(TVU5,xi,5),q,3),qdd,2) ...
            + ttv(ttv(ttv(TVU5,xi,4),q,3),qdd,2) ...
            + ttv(ttv(ttv(TVV5,q,4),q,3),qdd,2) ...
            + ttv(ttv(TVx4,qd,3),qd,2) ...
            + ttv(ttv(ttv(TVU5,xi,5),qd,3),qd,2) ...
            + ttv(ttv(ttv(TVU5,xi,4),qd,3),qd,2) ...
            + ttv(ttv(ttv(TVV5,q,4),qd,3),qd,2) ...
            + ttv(ttv(TxV4,qd,3),qd,2) ...
            + ttv(ttv(ttv(TUV5,xi,5),qd,4),qd,2) ...
            + ttv(ttv(ttv(TUV5,qd,4),xi,3),qd,2) ...
            + ttv(ttv(ttv(TVV5,qd,4),q,3),qd,2);
    
    df2dp = ttv(ttv(Txx4,xi,4),qdd,2) ...
            + ttv(ttv(Txx4,xi,3),qdd,2) ...
            + ttv(ttv(ttv(TxV5,xi,5),qd,3),qdd,2) ...
            + ttv(ttv(ttv(TxV5,xi,4),qd,3),qdd,2) ...
            + ttv(ttv(ttv(TVx5,xi,5),q,3),qdd,2) ...
            + ttv(ttv(ttv(TVx5,xi,4),q,3),qdd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,6),q,4),q,3),qdd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,5),q,4),q,3),qdd,2) ...
            + ttv(ttv(ttv(TVx5,xi,5),qd,3),qd,2) ...
            + ttv(ttv(ttv(TVx5,xi,4),qd,3),qd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,6),q,4),qd,3),qd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,5),q,4),qd,3),qd,2) ...
            + ttv(ttv(ttv(TxV5,xi,5),qd,3),qd,2) ...
            + ttv(ttv(ttv(TxV5,xi,4),qd,3),qd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,6),qd,4),q,3),qd,2) ...
            + ttv(ttv(ttv(ttv(TVV6,xi,5),qd,4),q,3),qd,2);

    dfdp = df0dp + df1dp + df2dp;
    
    % dfdq ________________________________________________________________
    dfdq = ttv(TxV,qdd,2) ...
         + ttv(ttv(TUV,xi,3),qdd,2) ...
         + ttv(TVx,qdd,2) ...
         + ttv(ttv(TVU,xi,4),qdd,2) ...
         + ttv(ttv(TVV,q,4),qdd,2) ...
         + ttv(ttv(TVV,q,3),qdd,2) ...
         + ttv(ttv(TVV,qd,3),qd,2) ...
         + ttv(ttv(TVV,qd,4),qd,2);
    
    % dfdqd _______________________________________________________________
    dfdqd = ttv(TVx,qd,3) ...
            + ttv(TVx,qd,2) ...
            + ttv(ttv(TVU,xi,4),qd,3) ...
            + ttv(ttv(TVU,xi,4),qd,2) ...
            + ttv(ttv(TVV,q,4),qd,3) ...
            + ttv(ttv(TVV,q,4),qd,2) ...
            + ttv(TxV,qd,3) ...
            + ttv(TxV,qd,2) ...
            + ttv(ttv(TUV,qd,4),xi,3) ...
            + ttv(ttv(TUV,xi,3),qd,2) ...
            + ttv(ttv(TVV,qd,4),q,3) ...
            + ttv(ttv(TVV,q,3),qd,2);
            

    % dfdqdd ______________________________________________________________
    dfdqdd = Txx ...
            + ttv(TxU,xi,3) ...
            + ttv(TxV,q,3) ...
            + ttv(TUx,xi,3) ...
            + ttv(ttv(TUU,xi,4),xi,3) ...
            + ttv(ttv(TUV,q,4),xi,3) ...
            + ttv(TVx,q,3) ...
            + ttv(ttv(TVU,xi,4),q,3) ...
            + ttv(ttv(TVV,q,4),q,3);
 
    
    % store results in output struct ______________________________________
    der.dfdp = double(dfdp);
    der.dfdq = double(dfdq);
    der.dfdqd = double(dfdqd);
    der.dfdqdd = double(dfdqdd);
   
end
